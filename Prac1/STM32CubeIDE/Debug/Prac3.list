
Prac3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001544  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001604  08001604  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001604  08001604  00003054  2**0
                  CONTENTS
  4 .ARM          00000000  08001604  08001604  00003054  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001604  08001604  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001604  08001604  00002604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001608  08001608  00002608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  0800160c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  20000054  08001660  00003054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08001660  000030c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007728  00000000  00000000  0000307c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000168f  00000000  00000000  0000a7a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e8  00000000  00000000  0000be38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007a0  00000000  00000000  0000c820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011e09  00000000  00000000  0000cfc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000af5d  00000000  00000000  0001edc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006ed71  00000000  00000000  00029d26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00098a97  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000237c  00000000  00000000  00098adc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ca  00000000  00000000  0009ae58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000054 	.word	0x20000054
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080015ec 	.word	0x080015ec

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000058 	.word	0x20000058
 8000104:	080015ec 	.word	0x080015ec

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	0002      	movs	r2, r0
 80003fc:	1dfb      	adds	r3, r7, #7
 80003fe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000400:	1dfb      	adds	r3, r7, #7
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	2b7f      	cmp	r3, #127	@ 0x7f
 8000406:	d809      	bhi.n	800041c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000408:	1dfb      	adds	r3, r7, #7
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	001a      	movs	r2, r3
 800040e:	231f      	movs	r3, #31
 8000410:	401a      	ands	r2, r3
 8000412:	4b04      	ldr	r3, [pc, #16]	@ (8000424 <__NVIC_EnableIRQ+0x30>)
 8000414:	2101      	movs	r1, #1
 8000416:	4091      	lsls	r1, r2
 8000418:	000a      	movs	r2, r1
 800041a:	601a      	str	r2, [r3, #0]
  }
}
 800041c:	46c0      	nop			@ (mov r8, r8)
 800041e:	46bd      	mov	sp, r7
 8000420:	b002      	add	sp, #8
 8000422:	bd80      	pop	{r7, pc}
 8000424:	e000e100 	.word	0xe000e100

08000428 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800042c:	4b04      	ldr	r3, [pc, #16]	@ (8000440 <LL_RCC_HSI_Enable+0x18>)
 800042e:	681a      	ldr	r2, [r3, #0]
 8000430:	4b03      	ldr	r3, [pc, #12]	@ (8000440 <LL_RCC_HSI_Enable+0x18>)
 8000432:	2101      	movs	r1, #1
 8000434:	430a      	orrs	r2, r1
 8000436:	601a      	str	r2, [r3, #0]
}
 8000438:	46c0      	nop			@ (mov r8, r8)
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	46c0      	nop			@ (mov r8, r8)
 8000440:	40021000 	.word	0x40021000

08000444 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000448:	4b05      	ldr	r3, [pc, #20]	@ (8000460 <LL_RCC_HSI_IsReady+0x1c>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	2202      	movs	r2, #2
 800044e:	4013      	ands	r3, r2
 8000450:	3b02      	subs	r3, #2
 8000452:	425a      	negs	r2, r3
 8000454:	4153      	adcs	r3, r2
 8000456:	b2db      	uxtb	r3, r3
}
 8000458:	0018      	movs	r0, r3
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	46c0      	nop			@ (mov r8, r8)
 8000460:	40021000 	.word	0x40021000

08000464 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 800046c:	4b06      	ldr	r3, [pc, #24]	@ (8000488 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	22f8      	movs	r2, #248	@ 0xf8
 8000472:	4393      	bics	r3, r2
 8000474:	0019      	movs	r1, r3
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	00da      	lsls	r2, r3, #3
 800047a:	4b03      	ldr	r3, [pc, #12]	@ (8000488 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 800047c:	430a      	orrs	r2, r1
 800047e:	601a      	str	r2, [r3, #0]
}
 8000480:	46c0      	nop			@ (mov r8, r8)
 8000482:	46bd      	mov	sp, r7
 8000484:	b002      	add	sp, #8
 8000486:	bd80      	pop	{r7, pc}
 8000488:	40021000 	.word	0x40021000

0800048c <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000494:	4b06      	ldr	r3, [pc, #24]	@ (80004b0 <LL_RCC_SetSysClkSource+0x24>)
 8000496:	685b      	ldr	r3, [r3, #4]
 8000498:	2203      	movs	r2, #3
 800049a:	4393      	bics	r3, r2
 800049c:	0019      	movs	r1, r3
 800049e:	4b04      	ldr	r3, [pc, #16]	@ (80004b0 <LL_RCC_SetSysClkSource+0x24>)
 80004a0:	687a      	ldr	r2, [r7, #4]
 80004a2:	430a      	orrs	r2, r1
 80004a4:	605a      	str	r2, [r3, #4]
}
 80004a6:	46c0      	nop			@ (mov r8, r8)
 80004a8:	46bd      	mov	sp, r7
 80004aa:	b002      	add	sp, #8
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	46c0      	nop			@ (mov r8, r8)
 80004b0:	40021000 	.word	0x40021000

080004b4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI48 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80004b8:	4b03      	ldr	r3, [pc, #12]	@ (80004c8 <LL_RCC_GetSysClkSource+0x14>)
 80004ba:	685b      	ldr	r3, [r3, #4]
 80004bc:	220c      	movs	r2, #12
 80004be:	4013      	ands	r3, r2
}
 80004c0:	0018      	movs	r0, r3
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	46c0      	nop			@ (mov r8, r8)
 80004c8:	40021000 	.word	0x40021000

080004cc <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80004d4:	4b06      	ldr	r3, [pc, #24]	@ (80004f0 <LL_RCC_SetAHBPrescaler+0x24>)
 80004d6:	685b      	ldr	r3, [r3, #4]
 80004d8:	22f0      	movs	r2, #240	@ 0xf0
 80004da:	4393      	bics	r3, r2
 80004dc:	0019      	movs	r1, r3
 80004de:	4b04      	ldr	r3, [pc, #16]	@ (80004f0 <LL_RCC_SetAHBPrescaler+0x24>)
 80004e0:	687a      	ldr	r2, [r7, #4]
 80004e2:	430a      	orrs	r2, r1
 80004e4:	605a      	str	r2, [r3, #4]
}
 80004e6:	46c0      	nop			@ (mov r8, r8)
 80004e8:	46bd      	mov	sp, r7
 80004ea:	b002      	add	sp, #8
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	46c0      	nop			@ (mov r8, r8)
 80004f0:	40021000 	.word	0x40021000

080004f4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 80004fc:	4b06      	ldr	r3, [pc, #24]	@ (8000518 <LL_RCC_SetAPB1Prescaler+0x24>)
 80004fe:	685b      	ldr	r3, [r3, #4]
 8000500:	4a06      	ldr	r2, [pc, #24]	@ (800051c <LL_RCC_SetAPB1Prescaler+0x28>)
 8000502:	4013      	ands	r3, r2
 8000504:	0019      	movs	r1, r3
 8000506:	4b04      	ldr	r3, [pc, #16]	@ (8000518 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000508:	687a      	ldr	r2, [r7, #4]
 800050a:	430a      	orrs	r2, r1
 800050c:	605a      	str	r2, [r3, #4]
}
 800050e:	46c0      	nop			@ (mov r8, r8)
 8000510:	46bd      	mov	sp, r7
 8000512:	b002      	add	sp, #8
 8000514:	bd80      	pop	{r7, pc}
 8000516:	46c0      	nop			@ (mov r8, r8)
 8000518:	40021000 	.word	0x40021000
 800051c:	fffff8ff 	.word	0xfffff8ff

08000520 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b084      	sub	sp, #16
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000528:	4b07      	ldr	r3, [pc, #28]	@ (8000548 <LL_AHB1_GRP1_EnableClock+0x28>)
 800052a:	6959      	ldr	r1, [r3, #20]
 800052c:	4b06      	ldr	r3, [pc, #24]	@ (8000548 <LL_AHB1_GRP1_EnableClock+0x28>)
 800052e:	687a      	ldr	r2, [r7, #4]
 8000530:	430a      	orrs	r2, r1
 8000532:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000534:	4b04      	ldr	r3, [pc, #16]	@ (8000548 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000536:	695b      	ldr	r3, [r3, #20]
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	4013      	ands	r3, r2
 800053c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800053e:	68fb      	ldr	r3, [r7, #12]
}
 8000540:	46c0      	nop			@ (mov r8, r8)
 8000542:	46bd      	mov	sp, r7
 8000544:	b004      	add	sp, #16
 8000546:	bd80      	pop	{r7, pc}
 8000548:	40021000 	.word	0x40021000

0800054c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000554:	4b06      	ldr	r3, [pc, #24]	@ (8000570 <LL_FLASH_SetLatency+0x24>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	2201      	movs	r2, #1
 800055a:	4393      	bics	r3, r2
 800055c:	0019      	movs	r1, r3
 800055e:	4b04      	ldr	r3, [pc, #16]	@ (8000570 <LL_FLASH_SetLatency+0x24>)
 8000560:	687a      	ldr	r2, [r7, #4]
 8000562:	430a      	orrs	r2, r1
 8000564:	601a      	str	r2, [r3, #0]
}
 8000566:	46c0      	nop			@ (mov r8, r8)
 8000568:	46bd      	mov	sp, r7
 800056a:	b002      	add	sp, #8
 800056c:	bd80      	pop	{r7, pc}
 800056e:	46c0      	nop			@ (mov r8, r8)
 8000570:	40022000 	.word	0x40022000

08000574 <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000578:	4b03      	ldr	r3, [pc, #12]	@ (8000588 <LL_FLASH_GetLatency+0x14>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	2201      	movs	r2, #1
 800057e:	4013      	ands	r3, r2
}
 8000580:	0018      	movs	r0, r3
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	46c0      	nop			@ (mov r8, r8)
 8000588:	40022000 	.word	0x40022000

0800058c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	683a      	ldr	r2, [r7, #0]
 800059a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800059c:	46c0      	nop			@ (mov r8, r8)
 800059e:	46bd      	mov	sp, r7
 80005a0:	b002      	add	sp, #8
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a8:	f000 fb04 	bl	8000bb4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ac:	f000 f85c 	bl	8000668 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b0:	f000 f8bc 	bl	800072c <MX_GPIO_Init>
  MX_TIM16_Init();
 80005b4:	f000 f88c 	bl	80006d0 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  // TODO: Start timer TIM16
  HAL_TIM_Base_Start_IT(&htim16);
 80005b8:	4b26      	ldr	r3, [pc, #152]	@ (8000654 <main+0xb0>)
 80005ba:	0018      	movs	r0, r3
 80005bc:	f000 fcc0 	bl	8000f40 <HAL_TIM_Base_Start_IT>

    /* USER CODE BEGIN 3 */

    // TODO: Check pushbuttons to change timer delay
      // Check pushbutton states and adjust timer delay
      if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) {
 80005c0:	2390      	movs	r3, #144	@ 0x90
 80005c2:	05db      	lsls	r3, r3, #23
 80005c4:	2101      	movs	r1, #1
 80005c6:	0018      	movs	r0, r3
 80005c8:	f000 fc30 	bl	8000e2c <HAL_GPIO_ReadPin>
 80005cc:	1e03      	subs	r3, r0, #0
 80005ce:	d109      	bne.n	80005e4 <main+0x40>
          __HAL_TIM_SET_AUTORELOAD(&htim16, (1000 / 2) - 1); // 0.5s delay
 80005d0:	4b20      	ldr	r3, [pc, #128]	@ (8000654 <main+0xb0>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	22f4      	movs	r2, #244	@ 0xf4
 80005d6:	32ff      	adds	r2, #255	@ 0xff
 80005d8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80005da:	4b1e      	ldr	r3, [pc, #120]	@ (8000654 <main+0xb0>)
 80005dc:	22f4      	movs	r2, #244	@ 0xf4
 80005de:	32ff      	adds	r2, #255	@ 0xff
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	e032      	b.n	800064a <main+0xa6>
      } else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET) {
 80005e4:	2390      	movs	r3, #144	@ 0x90
 80005e6:	05db      	lsls	r3, r3, #23
 80005e8:	2102      	movs	r1, #2
 80005ea:	0018      	movs	r0, r3
 80005ec:	f000 fc1e 	bl	8000e2c <HAL_GPIO_ReadPin>
 80005f0:	1e03      	subs	r3, r0, #0
 80005f2:	d107      	bne.n	8000604 <main+0x60>
          __HAL_TIM_SET_AUTORELOAD(&htim16, (1000 * 2) - 1); // 2s delay
 80005f4:	4b17      	ldr	r3, [pc, #92]	@ (8000654 <main+0xb0>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a17      	ldr	r2, [pc, #92]	@ (8000658 <main+0xb4>)
 80005fa:	62da      	str	r2, [r3, #44]	@ 0x2c
 80005fc:	4b15      	ldr	r3, [pc, #84]	@ (8000654 <main+0xb0>)
 80005fe:	4a16      	ldr	r2, [pc, #88]	@ (8000658 <main+0xb4>)
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	e022      	b.n	800064a <main+0xa6>
      }else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET) {
 8000604:	2390      	movs	r3, #144	@ 0x90
 8000606:	05db      	lsls	r3, r3, #23
 8000608:	2104      	movs	r1, #4
 800060a:	0018      	movs	r0, r3
 800060c:	f000 fc0e 	bl	8000e2c <HAL_GPIO_ReadPin>
 8000610:	1e03      	subs	r3, r0, #0
 8000612:	d107      	bne.n	8000624 <main+0x80>
          __HAL_TIM_SET_AUTORELOAD(&htim16, 1000- 1); // 1s delay
 8000614:	4b0f      	ldr	r3, [pc, #60]	@ (8000654 <main+0xb0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a10      	ldr	r2, [pc, #64]	@ (800065c <main+0xb8>)
 800061a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800061c:	4b0d      	ldr	r3, [pc, #52]	@ (8000654 <main+0xb0>)
 800061e:	4a0f      	ldr	r2, [pc, #60]	@ (800065c <main+0xb8>)
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	e012      	b.n	800064a <main+0xa6>
      }else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_RESET) {
 8000624:	2390      	movs	r3, #144	@ 0x90
 8000626:	05db      	lsls	r3, r3, #23
 8000628:	2108      	movs	r1, #8
 800062a:	0018      	movs	r0, r3
 800062c:	f000 fbfe 	bl	8000e2c <HAL_GPIO_ReadPin>
 8000630:	1e03      	subs	r3, r0, #0
 8000632:	d10a      	bne.n	800064a <main+0xa6>
          currentPattern = 1; // Reset to pattern 1
 8000634:	4b0a      	ldr	r3, [pc, #40]	@ (8000660 <main+0xbc>)
 8000636:	2201      	movs	r2, #1
 8000638:	701a      	strb	r2, [r3, #0]
          SetLEDs(patterns[currentPattern]);
 800063a:	4b09      	ldr	r3, [pc, #36]	@ (8000660 <main+0xbc>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	00da      	lsls	r2, r3, #3
 8000640:	4b08      	ldr	r3, [pc, #32]	@ (8000664 <main+0xc0>)
 8000642:	18d3      	adds	r3, r2, r3
 8000644:	0018      	movs	r0, r3
 8000646:	f000 f9b1 	bl	80009ac <SetLEDs>
      }

      HAL_Delay(10); // Small delay to debounce the buttons
 800064a:	200a      	movs	r0, #10
 800064c:	f000 fb16 	bl	8000c7c <HAL_Delay>
      if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) {
 8000650:	e7b6      	b.n	80005c0 <main+0x1c>
 8000652:	46c0      	nop			@ (mov r8, r8)
 8000654:	20000070 	.word	0x20000070
 8000658:	000007cf 	.word	0x000007cf
 800065c:	000003e7 	.word	0x000003e7
 8000660:	200000b8 	.word	0x200000b8
 8000664:	20000000 	.word	0x20000000

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 800066c:	2000      	movs	r0, #0
 800066e:	f7ff ff6d 	bl	800054c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8000672:	46c0      	nop			@ (mov r8, r8)
 8000674:	f7ff ff7e 	bl	8000574 <LL_FLASH_GetLatency>
 8000678:	1e03      	subs	r3, r0, #0
 800067a:	d1fb      	bne.n	8000674 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 800067c:	f7ff fed4 	bl	8000428 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000680:	46c0      	nop			@ (mov r8, r8)
 8000682:	f7ff fedf 	bl	8000444 <LL_RCC_HSI_IsReady>
 8000686:	0003      	movs	r3, r0
 8000688:	2b01      	cmp	r3, #1
 800068a:	d1fa      	bne.n	8000682 <SystemClock_Config+0x1a>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 800068c:	2010      	movs	r0, #16
 800068e:	f7ff fee9 	bl	8000464 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000692:	2000      	movs	r0, #0
 8000694:	f7ff ff1a 	bl	80004cc <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000698:	2000      	movs	r0, #0
 800069a:	f7ff ff2b 	bl	80004f4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 800069e:	2000      	movs	r0, #0
 80006a0:	f7ff fef4 	bl	800048c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80006a4:	46c0      	nop			@ (mov r8, r8)
 80006a6:	f7ff ff05 	bl	80004b4 <LL_RCC_GetSysClkSource>
 80006aa:	1e03      	subs	r3, r0, #0
 80006ac:	d1fb      	bne.n	80006a6 <SystemClock_Config+0x3e>
  {

  }
  LL_SetSystemCoreClock(8000000);
 80006ae:	4b07      	ldr	r3, [pc, #28]	@ (80006cc <SystemClock_Config+0x64>)
 80006b0:	0018      	movs	r0, r3
 80006b2:	f000 ff61 	bl	8001578 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 80006b6:	2003      	movs	r0, #3
 80006b8:	f000 fa90 	bl	8000bdc <HAL_InitTick>
 80006bc:	1e03      	subs	r3, r0, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80006c0:	f000 f9e6 	bl	8000a90 <Error_Handler>
  }
}
 80006c4:	46c0      	nop			@ (mov r8, r8)
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	46c0      	nop			@ (mov r8, r8)
 80006cc:	007a1200 	.word	0x007a1200

080006d0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80006d4:	4b11      	ldr	r3, [pc, #68]	@ (800071c <MX_TIM16_Init+0x4c>)
 80006d6:	4a12      	ldr	r2, [pc, #72]	@ (8000720 <MX_TIM16_Init+0x50>)
 80006d8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 8000-1;
 80006da:	4b10      	ldr	r3, [pc, #64]	@ (800071c <MX_TIM16_Init+0x4c>)
 80006dc:	4a11      	ldr	r2, [pc, #68]	@ (8000724 <MX_TIM16_Init+0x54>)
 80006de:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e0:	4b0e      	ldr	r3, [pc, #56]	@ (800071c <MX_TIM16_Init+0x4c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 80006e6:	4b0d      	ldr	r3, [pc, #52]	@ (800071c <MX_TIM16_Init+0x4c>)
 80006e8:	4a0f      	ldr	r2, [pc, #60]	@ (8000728 <MX_TIM16_Init+0x58>)
 80006ea:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ec:	4b0b      	ldr	r3, [pc, #44]	@ (800071c <MX_TIM16_Init+0x4c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80006f2:	4b0a      	ldr	r3, [pc, #40]	@ (800071c <MX_TIM16_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006f8:	4b08      	ldr	r3, [pc, #32]	@ (800071c <MX_TIM16_Init+0x4c>)
 80006fa:	2280      	movs	r2, #128	@ 0x80
 80006fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80006fe:	4b07      	ldr	r3, [pc, #28]	@ (800071c <MX_TIM16_Init+0x4c>)
 8000700:	0018      	movs	r0, r3
 8000702:	f000 fbcd 	bl	8000ea0 <HAL_TIM_Base_Init>
 8000706:	1e03      	subs	r3, r0, #0
 8000708:	d001      	beq.n	800070e <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 800070a:	f000 f9c1 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */
  NVIC_EnableIRQ(TIM16_IRQn);
 800070e:	2015      	movs	r0, #21
 8000710:	f7ff fe70 	bl	80003f4 <__NVIC_EnableIRQ>
  /* USER CODE END TIM16_Init 2 */

}
 8000714:	46c0      	nop			@ (mov r8, r8)
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	46c0      	nop			@ (mov r8, r8)
 800071c:	20000070 	.word	0x20000070
 8000720:	40014400 	.word	0x40014400
 8000724:	00001f3f 	.word	0x00001f3f
 8000728:	000003e7 	.word	0x000003e7

0800072c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b086      	sub	sp, #24
 8000730:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000732:	003b      	movs	r3, r7
 8000734:	0018      	movs	r0, r3
 8000736:	2318      	movs	r3, #24
 8000738:	001a      	movs	r2, r3
 800073a:	2100      	movs	r1, #0
 800073c:	f000 ff2a 	bl	8001594 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 8000740:	2380      	movs	r3, #128	@ 0x80
 8000742:	03db      	lsls	r3, r3, #15
 8000744:	0018      	movs	r0, r3
 8000746:	f7ff feeb 	bl	8000520 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800074a:	2380      	movs	r3, #128	@ 0x80
 800074c:	029b      	lsls	r3, r3, #10
 800074e:	0018      	movs	r0, r3
 8000750:	f7ff fee6 	bl	8000520 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000754:	2380      	movs	r3, #128	@ 0x80
 8000756:	02db      	lsls	r3, r3, #11
 8000758:	0018      	movs	r0, r3
 800075a:	f7ff fee1 	bl	8000520 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LED0_GPIO_Port, LED0_Pin);
 800075e:	4b92      	ldr	r3, [pc, #584]	@ (80009a8 <MX_GPIO_Init+0x27c>)
 8000760:	2101      	movs	r1, #1
 8000762:	0018      	movs	r0, r3
 8000764:	f7ff ff12 	bl	800058c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED1_GPIO_Port, LED1_Pin);
 8000768:	4b8f      	ldr	r3, [pc, #572]	@ (80009a8 <MX_GPIO_Init+0x27c>)
 800076a:	2102      	movs	r1, #2
 800076c:	0018      	movs	r0, r3
 800076e:	f7ff ff0d 	bl	800058c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED2_GPIO_Port, LED2_Pin);
 8000772:	4b8d      	ldr	r3, [pc, #564]	@ (80009a8 <MX_GPIO_Init+0x27c>)
 8000774:	2104      	movs	r1, #4
 8000776:	0018      	movs	r0, r3
 8000778:	f7ff ff08 	bl	800058c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED3_GPIO_Port, LED3_Pin);
 800077c:	4b8a      	ldr	r3, [pc, #552]	@ (80009a8 <MX_GPIO_Init+0x27c>)
 800077e:	2108      	movs	r1, #8
 8000780:	0018      	movs	r0, r3
 8000782:	f7ff ff03 	bl	800058c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED4_GPIO_Port, LED4_Pin);
 8000786:	4b88      	ldr	r3, [pc, #544]	@ (80009a8 <MX_GPIO_Init+0x27c>)
 8000788:	2110      	movs	r1, #16
 800078a:	0018      	movs	r0, r3
 800078c:	f7ff fefe 	bl	800058c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED5_GPIO_Port, LED5_Pin);
 8000790:	4b85      	ldr	r3, [pc, #532]	@ (80009a8 <MX_GPIO_Init+0x27c>)
 8000792:	2120      	movs	r1, #32
 8000794:	0018      	movs	r0, r3
 8000796:	f7ff fef9 	bl	800058c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED6_GPIO_Port, LED6_Pin);
 800079a:	4b83      	ldr	r3, [pc, #524]	@ (80009a8 <MX_GPIO_Init+0x27c>)
 800079c:	2140      	movs	r1, #64	@ 0x40
 800079e:	0018      	movs	r0, r3
 80007a0:	f7ff fef4 	bl	800058c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED7_GPIO_Port, LED7_Pin);
 80007a4:	4b80      	ldr	r3, [pc, #512]	@ (80009a8 <MX_GPIO_Init+0x27c>)
 80007a6:	2180      	movs	r1, #128	@ 0x80
 80007a8:	0018      	movs	r0, r3
 80007aa:	f7ff feef 	bl	800058c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = Button0_Pin;
 80007ae:	003b      	movs	r3, r7
 80007b0:	2201      	movs	r2, #1
 80007b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80007b4:	003b      	movs	r3, r7
 80007b6:	2200      	movs	r2, #0
 80007b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80007ba:	003b      	movs	r3, r7
 80007bc:	2201      	movs	r2, #1
 80007be:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(Button0_GPIO_Port, &GPIO_InitStruct);
 80007c0:	003a      	movs	r2, r7
 80007c2:	2390      	movs	r3, #144	@ 0x90
 80007c4:	05db      	lsls	r3, r3, #23
 80007c6:	0011      	movs	r1, r2
 80007c8:	0018      	movs	r0, r3
 80007ca:	f000 fe78 	bl	80014be <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Button1_Pin;
 80007ce:	003b      	movs	r3, r7
 80007d0:	2202      	movs	r2, #2
 80007d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80007d4:	003b      	movs	r3, r7
 80007d6:	2200      	movs	r2, #0
 80007d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80007da:	003b      	movs	r3, r7
 80007dc:	2201      	movs	r2, #1
 80007de:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(Button1_GPIO_Port, &GPIO_InitStruct);
 80007e0:	003a      	movs	r2, r7
 80007e2:	2390      	movs	r3, #144	@ 0x90
 80007e4:	05db      	lsls	r3, r3, #23
 80007e6:	0011      	movs	r1, r2
 80007e8:	0018      	movs	r0, r3
 80007ea:	f000 fe68 	bl	80014be <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Button2_Pin;
 80007ee:	003b      	movs	r3, r7
 80007f0:	2204      	movs	r2, #4
 80007f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80007f4:	003b      	movs	r3, r7
 80007f6:	2200      	movs	r2, #0
 80007f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80007fa:	003b      	movs	r3, r7
 80007fc:	2201      	movs	r2, #1
 80007fe:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(Button2_GPIO_Port, &GPIO_InitStruct);
 8000800:	003a      	movs	r2, r7
 8000802:	2390      	movs	r3, #144	@ 0x90
 8000804:	05db      	lsls	r3, r3, #23
 8000806:	0011      	movs	r1, r2
 8000808:	0018      	movs	r0, r3
 800080a:	f000 fe58 	bl	80014be <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Button3_Pin;
 800080e:	003b      	movs	r3, r7
 8000810:	2208      	movs	r2, #8
 8000812:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000814:	003b      	movs	r3, r7
 8000816:	2200      	movs	r2, #0
 8000818:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800081a:	003b      	movs	r3, r7
 800081c:	2201      	movs	r2, #1
 800081e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(Button3_GPIO_Port, &GPIO_InitStruct);
 8000820:	003a      	movs	r2, r7
 8000822:	2390      	movs	r3, #144	@ 0x90
 8000824:	05db      	lsls	r3, r3, #23
 8000826:	0011      	movs	r1, r2
 8000828:	0018      	movs	r0, r3
 800082a:	f000 fe48 	bl	80014be <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED0_Pin;
 800082e:	003b      	movs	r3, r7
 8000830:	2201      	movs	r2, #1
 8000832:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000834:	003b      	movs	r3, r7
 8000836:	2201      	movs	r2, #1
 8000838:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800083a:	003b      	movs	r3, r7
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000840:	003b      	movs	r3, r7
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000846:	003b      	movs	r3, r7
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 800084c:	003b      	movs	r3, r7
 800084e:	4a56      	ldr	r2, [pc, #344]	@ (80009a8 <MX_GPIO_Init+0x27c>)
 8000850:	0019      	movs	r1, r3
 8000852:	0010      	movs	r0, r2
 8000854:	f000 fe33 	bl	80014be <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED1_Pin;
 8000858:	003b      	movs	r3, r7
 800085a:	2202      	movs	r2, #2
 800085c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800085e:	003b      	movs	r3, r7
 8000860:	2201      	movs	r2, #1
 8000862:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000864:	003b      	movs	r3, r7
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800086a:	003b      	movs	r3, r7
 800086c:	2200      	movs	r2, #0
 800086e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000870:	003b      	movs	r3, r7
 8000872:	2200      	movs	r2, #0
 8000874:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000876:	003b      	movs	r3, r7
 8000878:	4a4b      	ldr	r2, [pc, #300]	@ (80009a8 <MX_GPIO_Init+0x27c>)
 800087a:	0019      	movs	r1, r3
 800087c:	0010      	movs	r0, r2
 800087e:	f000 fe1e 	bl	80014be <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED2_Pin;
 8000882:	003b      	movs	r3, r7
 8000884:	2204      	movs	r2, #4
 8000886:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000888:	003b      	movs	r3, r7
 800088a:	2201      	movs	r2, #1
 800088c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800088e:	003b      	movs	r3, r7
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000894:	003b      	movs	r3, r7
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800089a:	003b      	movs	r3, r7
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 80008a0:	003b      	movs	r3, r7
 80008a2:	4a41      	ldr	r2, [pc, #260]	@ (80009a8 <MX_GPIO_Init+0x27c>)
 80008a4:	0019      	movs	r1, r3
 80008a6:	0010      	movs	r0, r2
 80008a8:	f000 fe09 	bl	80014be <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED3_Pin;
 80008ac:	003b      	movs	r3, r7
 80008ae:	2208      	movs	r2, #8
 80008b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80008b2:	003b      	movs	r3, r7
 80008b4:	2201      	movs	r2, #1
 80008b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80008b8:	003b      	movs	r3, r7
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80008be:	003b      	movs	r3, r7
 80008c0:	2200      	movs	r2, #0
 80008c2:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008c4:	003b      	movs	r3, r7
 80008c6:	2200      	movs	r2, #0
 80008c8:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 80008ca:	003b      	movs	r3, r7
 80008cc:	4a36      	ldr	r2, [pc, #216]	@ (80009a8 <MX_GPIO_Init+0x27c>)
 80008ce:	0019      	movs	r1, r3
 80008d0:	0010      	movs	r0, r2
 80008d2:	f000 fdf4 	bl	80014be <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED4_Pin;
 80008d6:	003b      	movs	r3, r7
 80008d8:	2210      	movs	r2, #16
 80008da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80008dc:	003b      	movs	r3, r7
 80008de:	2201      	movs	r2, #1
 80008e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80008e2:	003b      	movs	r3, r7
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80008e8:	003b      	movs	r3, r7
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008ee:	003b      	movs	r3, r7
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 80008f4:	003b      	movs	r3, r7
 80008f6:	4a2c      	ldr	r2, [pc, #176]	@ (80009a8 <MX_GPIO_Init+0x27c>)
 80008f8:	0019      	movs	r1, r3
 80008fa:	0010      	movs	r0, r2
 80008fc:	f000 fddf 	bl	80014be <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED5_Pin;
 8000900:	003b      	movs	r3, r7
 8000902:	2220      	movs	r2, #32
 8000904:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000906:	003b      	movs	r3, r7
 8000908:	2201      	movs	r2, #1
 800090a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800090c:	003b      	movs	r3, r7
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000912:	003b      	movs	r3, r7
 8000914:	2200      	movs	r2, #0
 8000916:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000918:	003b      	movs	r3, r7
 800091a:	2200      	movs	r2, #0
 800091c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED5_GPIO_Port, &GPIO_InitStruct);
 800091e:	003b      	movs	r3, r7
 8000920:	4a21      	ldr	r2, [pc, #132]	@ (80009a8 <MX_GPIO_Init+0x27c>)
 8000922:	0019      	movs	r1, r3
 8000924:	0010      	movs	r0, r2
 8000926:	f000 fdca 	bl	80014be <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED6_Pin;
 800092a:	003b      	movs	r3, r7
 800092c:	2240      	movs	r2, #64	@ 0x40
 800092e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000930:	003b      	movs	r3, r7
 8000932:	2201      	movs	r2, #1
 8000934:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000936:	003b      	movs	r3, r7
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800093c:	003b      	movs	r3, r7
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000942:	003b      	movs	r3, r7
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED6_GPIO_Port, &GPIO_InitStruct);
 8000948:	003b      	movs	r3, r7
 800094a:	4a17      	ldr	r2, [pc, #92]	@ (80009a8 <MX_GPIO_Init+0x27c>)
 800094c:	0019      	movs	r1, r3
 800094e:	0010      	movs	r0, r2
 8000950:	f000 fdb5 	bl	80014be <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED7_Pin;
 8000954:	003b      	movs	r3, r7
 8000956:	2280      	movs	r2, #128	@ 0x80
 8000958:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800095a:	003b      	movs	r3, r7
 800095c:	2201      	movs	r2, #1
 800095e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000960:	003b      	movs	r3, r7
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000966:	003b      	movs	r3, r7
 8000968:	2200      	movs	r2, #0
 800096a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800096c:	003b      	movs	r3, r7
 800096e:	2200      	movs	r2, #0
 8000970:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED7_GPIO_Port, &GPIO_InitStruct);
 8000972:	003b      	movs	r3, r7
 8000974:	4a0c      	ldr	r2, [pc, #48]	@ (80009a8 <MX_GPIO_Init+0x27c>)
 8000976:	0019      	movs	r1, r3
 8000978:	0010      	movs	r0, r2
 800097a:	f000 fda0 	bl	80014be <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 800097e:	003b      	movs	r3, r7
 8000980:	2280      	movs	r2, #128	@ 0x80
 8000982:	0092      	lsls	r2, r2, #2
 8000984:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000986:	003b      	movs	r3, r7
 8000988:	2200      	movs	r2, #0
 800098a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800098c:	003b      	movs	r3, r7
 800098e:	2200      	movs	r2, #0
 8000990:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000992:	003b      	movs	r3, r7
 8000994:	4a04      	ldr	r2, [pc, #16]	@ (80009a8 <MX_GPIO_Init+0x27c>)
 8000996:	0019      	movs	r1, r3
 8000998:	0010      	movs	r0, r2
 800099a:	f000 fd90 	bl	80014be <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800099e:	46c0      	nop			@ (mov r8, r8)
 80009a0:	46bd      	mov	sp, r7
 80009a2:	b006      	add	sp, #24
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	46c0      	nop			@ (mov r8, r8)
 80009a8:	48000400 	.word	0x48000400

080009ac <SetLEDs>:

/* USER CODE BEGIN 4 */
void SetLEDs(uint8_t *pattern){
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, pattern[0]);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	4820      	ldr	r0, [pc, #128]	@ (8000a3c <SetLEDs+0x90>)
 80009ba:	001a      	movs	r2, r3
 80009bc:	2101      	movs	r1, #1
 80009be:	f000 fa52 	bl	8000e66 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, pattern[1]);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	3301      	adds	r3, #1
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	481c      	ldr	r0, [pc, #112]	@ (8000a3c <SetLEDs+0x90>)
 80009ca:	001a      	movs	r2, r3
 80009cc:	2102      	movs	r1, #2
 80009ce:	f000 fa4a 	bl	8000e66 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, pattern[2]);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	3302      	adds	r3, #2
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	4818      	ldr	r0, [pc, #96]	@ (8000a3c <SetLEDs+0x90>)
 80009da:	001a      	movs	r2, r3
 80009dc:	2104      	movs	r1, #4
 80009de:	f000 fa42 	bl	8000e66 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, pattern[3]);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	3303      	adds	r3, #3
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	4814      	ldr	r0, [pc, #80]	@ (8000a3c <SetLEDs+0x90>)
 80009ea:	001a      	movs	r2, r3
 80009ec:	2108      	movs	r1, #8
 80009ee:	f000 fa3a 	bl	8000e66 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, pattern[4]);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	3304      	adds	r3, #4
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	4810      	ldr	r0, [pc, #64]	@ (8000a3c <SetLEDs+0x90>)
 80009fa:	001a      	movs	r2, r3
 80009fc:	2110      	movs	r1, #16
 80009fe:	f000 fa32 	bl	8000e66 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, pattern[5]);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	3305      	adds	r3, #5
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	480c      	ldr	r0, [pc, #48]	@ (8000a3c <SetLEDs+0x90>)
 8000a0a:	001a      	movs	r2, r3
 8000a0c:	2120      	movs	r1, #32
 8000a0e:	f000 fa2a 	bl	8000e66 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, pattern[6]);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	3306      	adds	r3, #6
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	4808      	ldr	r0, [pc, #32]	@ (8000a3c <SetLEDs+0x90>)
 8000a1a:	001a      	movs	r2, r3
 8000a1c:	2140      	movs	r1, #64	@ 0x40
 8000a1e:	f000 fa22 	bl	8000e66 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, pattern[7]);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	3307      	adds	r3, #7
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	4804      	ldr	r0, [pc, #16]	@ (8000a3c <SetLEDs+0x90>)
 8000a2a:	001a      	movs	r2, r3
 8000a2c:	2180      	movs	r1, #128	@ 0x80
 8000a2e:	f000 fa1a 	bl	8000e66 <HAL_GPIO_WritePin>
} //Uses HAL to write each state in an array to the 8 LEDs
 8000a32:	46c0      	nop			@ (mov r8, r8)
 8000a34:	46bd      	mov	sp, r7
 8000a36:	b002      	add	sp, #8
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	46c0      	nop			@ (mov r8, r8)
 8000a3c:	48000400 	.word	0x48000400

08000a40 <TIM16_IRQHandler>:

// Timer rolled over
void TIM16_IRQHandler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
	// Acknowledge interrupt
	HAL_TIM_IRQHandler(&htim16);
 8000a44:	4b0f      	ldr	r3, [pc, #60]	@ (8000a84 <TIM16_IRQHandler+0x44>)
 8000a46:	0018      	movs	r0, r3
 8000a48:	f000 facc 	bl	8000fe4 <HAL_TIM_IRQHandler>

	// TODO: Change LED pattern
	// print something
	__HAL_TIM_CLEAR_IT(&htim16, TIM_IT_UPDATE); //Clearing the interrupt flag
 8000a4c:	4b0d      	ldr	r3, [pc, #52]	@ (8000a84 <TIM16_IRQHandler+0x44>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2202      	movs	r2, #2
 8000a52:	4252      	negs	r2, r2
 8000a54:	611a      	str	r2, [r3, #16]

	// Update the pattern
	currentPattern = (currentPattern + 1) % 9; //counter cycles between 0 and 8
 8000a56:	4b0c      	ldr	r3, [pc, #48]	@ (8000a88 <TIM16_IRQHandler+0x48>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	2109      	movs	r1, #9
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f7ff fcc2 	bl	80003e8 <__aeabi_idivmod>
 8000a64:	000b      	movs	r3, r1
 8000a66:	b2da      	uxtb	r2, r3
 8000a68:	4b07      	ldr	r3, [pc, #28]	@ (8000a88 <TIM16_IRQHandler+0x48>)
 8000a6a:	701a      	strb	r2, [r3, #0]
	SetLEDs(patterns[currentPattern]); //writes the nth pattern to the LEDs
 8000a6c:	4b06      	ldr	r3, [pc, #24]	@ (8000a88 <TIM16_IRQHandler+0x48>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	00da      	lsls	r2, r3, #3
 8000a72:	4b06      	ldr	r3, [pc, #24]	@ (8000a8c <TIM16_IRQHandler+0x4c>)
 8000a74:	18d3      	adds	r3, r2, r3
 8000a76:	0018      	movs	r0, r3
 8000a78:	f7ff ff98 	bl	80009ac <SetLEDs>
}
 8000a7c:	46c0      	nop			@ (mov r8, r8)
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	46c0      	nop			@ (mov r8, r8)
 8000a84:	20000070 	.word	0x20000070
 8000a88:	200000b8 	.word	0x200000b8
 8000a8c:	20000000 	.word	0x20000000

08000a90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a94:	b672      	cpsid	i
}
 8000a96:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a98:	46c0      	nop			@ (mov r8, r8)
 8000a9a:	e7fd      	b.n	8000a98 <Error_Handler+0x8>

08000a9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa2:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae0 <HAL_MspInit+0x44>)
 8000aa4:	699a      	ldr	r2, [r3, #24]
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae0 <HAL_MspInit+0x44>)
 8000aa8:	2101      	movs	r1, #1
 8000aaa:	430a      	orrs	r2, r1
 8000aac:	619a      	str	r2, [r3, #24]
 8000aae:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae0 <HAL_MspInit+0x44>)
 8000ab0:	699b      	ldr	r3, [r3, #24]
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aba:	4b09      	ldr	r3, [pc, #36]	@ (8000ae0 <HAL_MspInit+0x44>)
 8000abc:	69da      	ldr	r2, [r3, #28]
 8000abe:	4b08      	ldr	r3, [pc, #32]	@ (8000ae0 <HAL_MspInit+0x44>)
 8000ac0:	2180      	movs	r1, #128	@ 0x80
 8000ac2:	0549      	lsls	r1, r1, #21
 8000ac4:	430a      	orrs	r2, r1
 8000ac6:	61da      	str	r2, [r3, #28]
 8000ac8:	4b05      	ldr	r3, [pc, #20]	@ (8000ae0 <HAL_MspInit+0x44>)
 8000aca:	69da      	ldr	r2, [r3, #28]
 8000acc:	2380      	movs	r3, #128	@ 0x80
 8000ace:	055b      	lsls	r3, r3, #21
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad6:	46c0      	nop			@ (mov r8, r8)
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	b002      	add	sp, #8
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	46c0      	nop			@ (mov r8, r8)
 8000ae0:	40021000 	.word	0x40021000

08000ae4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a0a      	ldr	r2, [pc, #40]	@ (8000b1c <HAL_TIM_Base_MspInit+0x38>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d10d      	bne.n	8000b12 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000af6:	4b0a      	ldr	r3, [pc, #40]	@ (8000b20 <HAL_TIM_Base_MspInit+0x3c>)
 8000af8:	699a      	ldr	r2, [r3, #24]
 8000afa:	4b09      	ldr	r3, [pc, #36]	@ (8000b20 <HAL_TIM_Base_MspInit+0x3c>)
 8000afc:	2180      	movs	r1, #128	@ 0x80
 8000afe:	0289      	lsls	r1, r1, #10
 8000b00:	430a      	orrs	r2, r1
 8000b02:	619a      	str	r2, [r3, #24]
 8000b04:	4b06      	ldr	r3, [pc, #24]	@ (8000b20 <HAL_TIM_Base_MspInit+0x3c>)
 8000b06:	699a      	ldr	r2, [r3, #24]
 8000b08:	2380      	movs	r3, #128	@ 0x80
 8000b0a:	029b      	lsls	r3, r3, #10
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM16_MspInit 1 */

  }

}
 8000b12:	46c0      	nop			@ (mov r8, r8)
 8000b14:	46bd      	mov	sp, r7
 8000b16:	b004      	add	sp, #16
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	46c0      	nop			@ (mov r8, r8)
 8000b1c:	40014400 	.word	0x40014400
 8000b20:	40021000 	.word	0x40021000

08000b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b28:	46c0      	nop			@ (mov r8, r8)
 8000b2a:	e7fd      	b.n	8000b28 <NMI_Handler+0x4>

08000b2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b30:	46c0      	nop			@ (mov r8, r8)
 8000b32:	e7fd      	b.n	8000b30 <HardFault_Handler+0x4>

08000b34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b38:	46c0      	nop			@ (mov r8, r8)
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b42:	46c0      	nop			@ (mov r8, r8)
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b4c:	f000 f87a 	bl	8000c44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b50:	46c0      	nop			@ (mov r8, r8)
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
	...

08000b58 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b58:	480d      	ldr	r0, [pc, #52]	@ (8000b90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b5a:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 8000b5c:	f000 f825 	bl	8000baa <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b60:	480c      	ldr	r0, [pc, #48]	@ (8000b94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b62:	490d      	ldr	r1, [pc, #52]	@ (8000b98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b64:	4a0d      	ldr	r2, [pc, #52]	@ (8000b9c <LoopForever+0xe>)
  movs r3, #0
 8000b66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b68:	e002      	b.n	8000b70 <LoopCopyDataInit>

08000b6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b6e:	3304      	adds	r3, #4

08000b70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b74:	d3f9      	bcc.n	8000b6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b76:	4a0a      	ldr	r2, [pc, #40]	@ (8000ba0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b78:	4c0a      	ldr	r4, [pc, #40]	@ (8000ba4 <LoopForever+0x16>)
  movs r3, #0
 8000b7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b7c:	e001      	b.n	8000b82 <LoopFillZerobss>

08000b7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b80:	3204      	adds	r2, #4

08000b82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b84:	d3fb      	bcc.n	8000b7e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b86:	f000 fd0d 	bl	80015a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b8a:	f7ff fd0b 	bl	80005a4 <main>

08000b8e <LoopForever>:

LoopForever:
    b LoopForever
 8000b8e:	e7fe      	b.n	8000b8e <LoopForever>
  ldr   r0, =_estack
 8000b90:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000b94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b98:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000b9c:	0800160c 	.word	0x0800160c
  ldr r2, =_sbss
 8000ba0:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000ba4:	200000c0 	.word	0x200000c0

08000ba8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ba8:	e7fe      	b.n	8000ba8 <ADC1_COMP_IRQHandler>

08000baa <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000bae:	46c0      	nop			@ (mov r8, r8)
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bb8:	4b07      	ldr	r3, [pc, #28]	@ (8000bd8 <HAL_Init+0x24>)
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	4b06      	ldr	r3, [pc, #24]	@ (8000bd8 <HAL_Init+0x24>)
 8000bbe:	2110      	movs	r1, #16
 8000bc0:	430a      	orrs	r2, r1
 8000bc2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000bc4:	2003      	movs	r0, #3
 8000bc6:	f000 f809 	bl	8000bdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bca:	f7ff ff67 	bl	8000a9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bce:	2300      	movs	r3, #0
}
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	46c0      	nop			@ (mov r8, r8)
 8000bd8:	40022000 	.word	0x40022000

08000bdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bdc:	b590      	push	{r4, r7, lr}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000be4:	4b14      	ldr	r3, [pc, #80]	@ (8000c38 <HAL_InitTick+0x5c>)
 8000be6:	681c      	ldr	r4, [r3, #0]
 8000be8:	4b14      	ldr	r3, [pc, #80]	@ (8000c3c <HAL_InitTick+0x60>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	0019      	movs	r1, r3
 8000bee:	23fa      	movs	r3, #250	@ 0xfa
 8000bf0:	0098      	lsls	r0, r3, #2
 8000bf2:	f7ff fa89 	bl	8000108 <__udivsi3>
 8000bf6:	0003      	movs	r3, r0
 8000bf8:	0019      	movs	r1, r3
 8000bfa:	0020      	movs	r0, r4
 8000bfc:	f7ff fa84 	bl	8000108 <__udivsi3>
 8000c00:	0003      	movs	r3, r0
 8000c02:	0018      	movs	r0, r3
 8000c04:	f000 f905 	bl	8000e12 <HAL_SYSTICK_Config>
 8000c08:	1e03      	subs	r3, r0, #0
 8000c0a:	d001      	beq.n	8000c10 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	e00f      	b.n	8000c30 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2b03      	cmp	r3, #3
 8000c14:	d80b      	bhi.n	8000c2e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c16:	6879      	ldr	r1, [r7, #4]
 8000c18:	2301      	movs	r3, #1
 8000c1a:	425b      	negs	r3, r3
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	0018      	movs	r0, r3
 8000c20:	f000 f8e2 	bl	8000de8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c24:	4b06      	ldr	r3, [pc, #24]	@ (8000c40 <HAL_InitTick+0x64>)
 8000c26:	687a      	ldr	r2, [r7, #4]
 8000c28:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	e000      	b.n	8000c30 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
}
 8000c30:	0018      	movs	r0, r3
 8000c32:	46bd      	mov	sp, r7
 8000c34:	b003      	add	sp, #12
 8000c36:	bd90      	pop	{r4, r7, pc}
 8000c38:	20000048 	.word	0x20000048
 8000c3c:	20000050 	.word	0x20000050
 8000c40:	2000004c 	.word	0x2000004c

08000c44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c48:	4b05      	ldr	r3, [pc, #20]	@ (8000c60 <HAL_IncTick+0x1c>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	001a      	movs	r2, r3
 8000c4e:	4b05      	ldr	r3, [pc, #20]	@ (8000c64 <HAL_IncTick+0x20>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	18d2      	adds	r2, r2, r3
 8000c54:	4b03      	ldr	r3, [pc, #12]	@ (8000c64 <HAL_IncTick+0x20>)
 8000c56:	601a      	str	r2, [r3, #0]
}
 8000c58:	46c0      	nop			@ (mov r8, r8)
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	46c0      	nop			@ (mov r8, r8)
 8000c60:	20000050 	.word	0x20000050
 8000c64:	200000bc 	.word	0x200000bc

08000c68 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c6c:	4b02      	ldr	r3, [pc, #8]	@ (8000c78 <HAL_GetTick+0x10>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
}
 8000c70:	0018      	movs	r0, r3
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	46c0      	nop			@ (mov r8, r8)
 8000c78:	200000bc 	.word	0x200000bc

08000c7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c84:	f7ff fff0 	bl	8000c68 <HAL_GetTick>
 8000c88:	0003      	movs	r3, r0
 8000c8a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	3301      	adds	r3, #1
 8000c94:	d005      	beq.n	8000ca2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c96:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc0 <HAL_Delay+0x44>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	001a      	movs	r2, r3
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	189b      	adds	r3, r3, r2
 8000ca0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000ca2:	46c0      	nop			@ (mov r8, r8)
 8000ca4:	f7ff ffe0 	bl	8000c68 <HAL_GetTick>
 8000ca8:	0002      	movs	r2, r0
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	68fa      	ldr	r2, [r7, #12]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d8f7      	bhi.n	8000ca4 <HAL_Delay+0x28>
  {
  }
}
 8000cb4:	46c0      	nop			@ (mov r8, r8)
 8000cb6:	46c0      	nop			@ (mov r8, r8)
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	b004      	add	sp, #16
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	46c0      	nop			@ (mov r8, r8)
 8000cc0:	20000050 	.word	0x20000050

08000cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc4:	b590      	push	{r4, r7, lr}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	0002      	movs	r2, r0
 8000ccc:	6039      	str	r1, [r7, #0]
 8000cce:	1dfb      	adds	r3, r7, #7
 8000cd0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000cd2:	1dfb      	adds	r3, r7, #7
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	2b7f      	cmp	r3, #127	@ 0x7f
 8000cd8:	d828      	bhi.n	8000d2c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cda:	4a2f      	ldr	r2, [pc, #188]	@ (8000d98 <__NVIC_SetPriority+0xd4>)
 8000cdc:	1dfb      	adds	r3, r7, #7
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	b25b      	sxtb	r3, r3
 8000ce2:	089b      	lsrs	r3, r3, #2
 8000ce4:	33c0      	adds	r3, #192	@ 0xc0
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	589b      	ldr	r3, [r3, r2]
 8000cea:	1dfa      	adds	r2, r7, #7
 8000cec:	7812      	ldrb	r2, [r2, #0]
 8000cee:	0011      	movs	r1, r2
 8000cf0:	2203      	movs	r2, #3
 8000cf2:	400a      	ands	r2, r1
 8000cf4:	00d2      	lsls	r2, r2, #3
 8000cf6:	21ff      	movs	r1, #255	@ 0xff
 8000cf8:	4091      	lsls	r1, r2
 8000cfa:	000a      	movs	r2, r1
 8000cfc:	43d2      	mvns	r2, r2
 8000cfe:	401a      	ands	r2, r3
 8000d00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	019b      	lsls	r3, r3, #6
 8000d06:	22ff      	movs	r2, #255	@ 0xff
 8000d08:	401a      	ands	r2, r3
 8000d0a:	1dfb      	adds	r3, r7, #7
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	0018      	movs	r0, r3
 8000d10:	2303      	movs	r3, #3
 8000d12:	4003      	ands	r3, r0
 8000d14:	00db      	lsls	r3, r3, #3
 8000d16:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d18:	481f      	ldr	r0, [pc, #124]	@ (8000d98 <__NVIC_SetPriority+0xd4>)
 8000d1a:	1dfb      	adds	r3, r7, #7
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	b25b      	sxtb	r3, r3
 8000d20:	089b      	lsrs	r3, r3, #2
 8000d22:	430a      	orrs	r2, r1
 8000d24:	33c0      	adds	r3, #192	@ 0xc0
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d2a:	e031      	b.n	8000d90 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d2c:	4a1b      	ldr	r2, [pc, #108]	@ (8000d9c <__NVIC_SetPriority+0xd8>)
 8000d2e:	1dfb      	adds	r3, r7, #7
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	0019      	movs	r1, r3
 8000d34:	230f      	movs	r3, #15
 8000d36:	400b      	ands	r3, r1
 8000d38:	3b08      	subs	r3, #8
 8000d3a:	089b      	lsrs	r3, r3, #2
 8000d3c:	3306      	adds	r3, #6
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	18d3      	adds	r3, r2, r3
 8000d42:	3304      	adds	r3, #4
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	1dfa      	adds	r2, r7, #7
 8000d48:	7812      	ldrb	r2, [r2, #0]
 8000d4a:	0011      	movs	r1, r2
 8000d4c:	2203      	movs	r2, #3
 8000d4e:	400a      	ands	r2, r1
 8000d50:	00d2      	lsls	r2, r2, #3
 8000d52:	21ff      	movs	r1, #255	@ 0xff
 8000d54:	4091      	lsls	r1, r2
 8000d56:	000a      	movs	r2, r1
 8000d58:	43d2      	mvns	r2, r2
 8000d5a:	401a      	ands	r2, r3
 8000d5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	019b      	lsls	r3, r3, #6
 8000d62:	22ff      	movs	r2, #255	@ 0xff
 8000d64:	401a      	ands	r2, r3
 8000d66:	1dfb      	adds	r3, r7, #7
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	4003      	ands	r3, r0
 8000d70:	00db      	lsls	r3, r3, #3
 8000d72:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d74:	4809      	ldr	r0, [pc, #36]	@ (8000d9c <__NVIC_SetPriority+0xd8>)
 8000d76:	1dfb      	adds	r3, r7, #7
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	001c      	movs	r4, r3
 8000d7c:	230f      	movs	r3, #15
 8000d7e:	4023      	ands	r3, r4
 8000d80:	3b08      	subs	r3, #8
 8000d82:	089b      	lsrs	r3, r3, #2
 8000d84:	430a      	orrs	r2, r1
 8000d86:	3306      	adds	r3, #6
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	18c3      	adds	r3, r0, r3
 8000d8c:	3304      	adds	r3, #4
 8000d8e:	601a      	str	r2, [r3, #0]
}
 8000d90:	46c0      	nop			@ (mov r8, r8)
 8000d92:	46bd      	mov	sp, r7
 8000d94:	b003      	add	sp, #12
 8000d96:	bd90      	pop	{r4, r7, pc}
 8000d98:	e000e100 	.word	0xe000e100
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	1e5a      	subs	r2, r3, #1
 8000dac:	2380      	movs	r3, #128	@ 0x80
 8000dae:	045b      	lsls	r3, r3, #17
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d301      	bcc.n	8000db8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000db4:	2301      	movs	r3, #1
 8000db6:	e010      	b.n	8000dda <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000db8:	4b0a      	ldr	r3, [pc, #40]	@ (8000de4 <SysTick_Config+0x44>)
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	3a01      	subs	r2, #1
 8000dbe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	425b      	negs	r3, r3
 8000dc4:	2103      	movs	r1, #3
 8000dc6:	0018      	movs	r0, r3
 8000dc8:	f7ff ff7c 	bl	8000cc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dcc:	4b05      	ldr	r3, [pc, #20]	@ (8000de4 <SysTick_Config+0x44>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dd2:	4b04      	ldr	r3, [pc, #16]	@ (8000de4 <SysTick_Config+0x44>)
 8000dd4:	2207      	movs	r2, #7
 8000dd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dd8:	2300      	movs	r3, #0
}
 8000dda:	0018      	movs	r0, r3
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	b002      	add	sp, #8
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	46c0      	nop			@ (mov r8, r8)
 8000de4:	e000e010 	.word	0xe000e010

08000de8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60b9      	str	r1, [r7, #8]
 8000df0:	607a      	str	r2, [r7, #4]
 8000df2:	210f      	movs	r1, #15
 8000df4:	187b      	adds	r3, r7, r1
 8000df6:	1c02      	adds	r2, r0, #0
 8000df8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000dfa:	68ba      	ldr	r2, [r7, #8]
 8000dfc:	187b      	adds	r3, r7, r1
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	b25b      	sxtb	r3, r3
 8000e02:	0011      	movs	r1, r2
 8000e04:	0018      	movs	r0, r3
 8000e06:	f7ff ff5d 	bl	8000cc4 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000e0a:	46c0      	nop			@ (mov r8, r8)
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	b004      	add	sp, #16
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b082      	sub	sp, #8
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	f7ff ffbf 	bl	8000da0 <SysTick_Config>
 8000e22:	0003      	movs	r3, r0
}
 8000e24:	0018      	movs	r0, r3
 8000e26:	46bd      	mov	sp, r7
 8000e28:	b002      	add	sp, #8
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	000a      	movs	r2, r1
 8000e36:	1cbb      	adds	r3, r7, #2
 8000e38:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	691b      	ldr	r3, [r3, #16]
 8000e3e:	1cba      	adds	r2, r7, #2
 8000e40:	8812      	ldrh	r2, [r2, #0]
 8000e42:	4013      	ands	r3, r2
 8000e44:	d004      	beq.n	8000e50 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000e46:	230f      	movs	r3, #15
 8000e48:	18fb      	adds	r3, r7, r3
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	701a      	strb	r2, [r3, #0]
 8000e4e:	e003      	b.n	8000e58 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e50:	230f      	movs	r3, #15
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	2200      	movs	r2, #0
 8000e56:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000e58:	230f      	movs	r3, #15
 8000e5a:	18fb      	adds	r3, r7, r3
 8000e5c:	781b      	ldrb	r3, [r3, #0]
  }
 8000e5e:	0018      	movs	r0, r3
 8000e60:	46bd      	mov	sp, r7
 8000e62:	b004      	add	sp, #16
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b082      	sub	sp, #8
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
 8000e6e:	0008      	movs	r0, r1
 8000e70:	0011      	movs	r1, r2
 8000e72:	1cbb      	adds	r3, r7, #2
 8000e74:	1c02      	adds	r2, r0, #0
 8000e76:	801a      	strh	r2, [r3, #0]
 8000e78:	1c7b      	adds	r3, r7, #1
 8000e7a:	1c0a      	adds	r2, r1, #0
 8000e7c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e7e:	1c7b      	adds	r3, r7, #1
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d004      	beq.n	8000e90 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e86:	1cbb      	adds	r3, r7, #2
 8000e88:	881a      	ldrh	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e8e:	e003      	b.n	8000e98 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e90:	1cbb      	adds	r3, r7, #2
 8000e92:	881a      	ldrh	r2, [r3, #0]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000e98:	46c0      	nop			@ (mov r8, r8)
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	b002      	add	sp, #8
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d101      	bne.n	8000eb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e042      	b.n	8000f38 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	223d      	movs	r2, #61	@ 0x3d
 8000eb6:	5c9b      	ldrb	r3, [r3, r2]
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d107      	bne.n	8000ece <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	223c      	movs	r2, #60	@ 0x3c
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	0018      	movs	r0, r3
 8000eca:	f7ff fe0b 	bl	8000ae4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	223d      	movs	r2, #61	@ 0x3d
 8000ed2:	2102      	movs	r1, #2
 8000ed4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	3304      	adds	r3, #4
 8000ede:	0019      	movs	r1, r3
 8000ee0:	0010      	movs	r0, r2
 8000ee2:	f000 f995 	bl	8001210 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2246      	movs	r2, #70	@ 0x46
 8000eea:	2101      	movs	r1, #1
 8000eec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	223e      	movs	r2, #62	@ 0x3e
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	5499      	strb	r1, [r3, r2]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	223f      	movs	r2, #63	@ 0x3f
 8000efa:	2101      	movs	r1, #1
 8000efc:	5499      	strb	r1, [r3, r2]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2240      	movs	r2, #64	@ 0x40
 8000f02:	2101      	movs	r1, #1
 8000f04:	5499      	strb	r1, [r3, r2]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2241      	movs	r2, #65	@ 0x41
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2242      	movs	r2, #66	@ 0x42
 8000f12:	2101      	movs	r1, #1
 8000f14:	5499      	strb	r1, [r3, r2]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2243      	movs	r2, #67	@ 0x43
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	5499      	strb	r1, [r3, r2]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2244      	movs	r2, #68	@ 0x44
 8000f22:	2101      	movs	r1, #1
 8000f24:	5499      	strb	r1, [r3, r2]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2245      	movs	r2, #69	@ 0x45
 8000f2a:	2101      	movs	r1, #1
 8000f2c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	223d      	movs	r2, #61	@ 0x3d
 8000f32:	2101      	movs	r1, #1
 8000f34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000f36:	2300      	movs	r3, #0
}
 8000f38:	0018      	movs	r0, r3
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	b002      	add	sp, #8
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	223d      	movs	r2, #61	@ 0x3d
 8000f4c:	5c9b      	ldrb	r3, [r3, r2]
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d001      	beq.n	8000f58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	e03b      	b.n	8000fd0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	223d      	movs	r2, #61	@ 0x3d
 8000f5c:	2102      	movs	r1, #2
 8000f5e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	68da      	ldr	r2, [r3, #12]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a18      	ldr	r2, [pc, #96]	@ (8000fd8 <HAL_TIM_Base_Start_IT+0x98>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d00f      	beq.n	8000f9a <HAL_TIM_Base_Start_IT+0x5a>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	2380      	movs	r3, #128	@ 0x80
 8000f80:	05db      	lsls	r3, r3, #23
 8000f82:	429a      	cmp	r2, r3
 8000f84:	d009      	beq.n	8000f9a <HAL_TIM_Base_Start_IT+0x5a>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a14      	ldr	r2, [pc, #80]	@ (8000fdc <HAL_TIM_Base_Start_IT+0x9c>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d004      	beq.n	8000f9a <HAL_TIM_Base_Start_IT+0x5a>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a12      	ldr	r2, [pc, #72]	@ (8000fe0 <HAL_TIM_Base_Start_IT+0xa0>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d111      	bne.n	8000fbe <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	2207      	movs	r2, #7
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	2b06      	cmp	r3, #6
 8000faa:	d010      	beq.n	8000fce <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	430a      	orrs	r2, r1
 8000fba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000fbc:	e007      	b.n	8000fce <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2101      	movs	r1, #1
 8000fca:	430a      	orrs	r2, r1
 8000fcc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000fce:	2300      	movs	r3, #0
}
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	b004      	add	sp, #16
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40012c00 	.word	0x40012c00
 8000fdc:	40000400 	.word	0x40000400
 8000fe0:	40014000 	.word	0x40014000

08000fe4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	68db      	ldr	r3, [r3, #12]
 8000ff2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	691b      	ldr	r3, [r3, #16]
 8000ffa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	2202      	movs	r2, #2
 8001000:	4013      	ands	r3, r2
 8001002:	d021      	beq.n	8001048 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	2202      	movs	r2, #2
 8001008:	4013      	ands	r3, r2
 800100a:	d01d      	beq.n	8001048 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2203      	movs	r2, #3
 8001012:	4252      	negs	r2, r2
 8001014:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2201      	movs	r2, #1
 800101a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	699b      	ldr	r3, [r3, #24]
 8001022:	2203      	movs	r2, #3
 8001024:	4013      	ands	r3, r2
 8001026:	d004      	beq.n	8001032 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	0018      	movs	r0, r3
 800102c:	f000 f8d8 	bl	80011e0 <HAL_TIM_IC_CaptureCallback>
 8001030:	e007      	b.n	8001042 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	0018      	movs	r0, r3
 8001036:	f000 f8cb 	bl	80011d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	0018      	movs	r0, r3
 800103e:	f000 f8d7 	bl	80011f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2200      	movs	r2, #0
 8001046:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	2204      	movs	r2, #4
 800104c:	4013      	ands	r3, r2
 800104e:	d022      	beq.n	8001096 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	2204      	movs	r2, #4
 8001054:	4013      	ands	r3, r2
 8001056:	d01e      	beq.n	8001096 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2205      	movs	r2, #5
 800105e:	4252      	negs	r2, r2
 8001060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2202      	movs	r2, #2
 8001066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	699a      	ldr	r2, [r3, #24]
 800106e:	23c0      	movs	r3, #192	@ 0xc0
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4013      	ands	r3, r2
 8001074:	d004      	beq.n	8001080 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	0018      	movs	r0, r3
 800107a:	f000 f8b1 	bl	80011e0 <HAL_TIM_IC_CaptureCallback>
 800107e:	e007      	b.n	8001090 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	0018      	movs	r0, r3
 8001084:	f000 f8a4 	bl	80011d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	0018      	movs	r0, r3
 800108c:	f000 f8b0 	bl	80011f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	2208      	movs	r2, #8
 800109a:	4013      	ands	r3, r2
 800109c:	d021      	beq.n	80010e2 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	2208      	movs	r2, #8
 80010a2:	4013      	ands	r3, r2
 80010a4:	d01d      	beq.n	80010e2 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2209      	movs	r2, #9
 80010ac:	4252      	negs	r2, r2
 80010ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2204      	movs	r2, #4
 80010b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	69db      	ldr	r3, [r3, #28]
 80010bc:	2203      	movs	r2, #3
 80010be:	4013      	ands	r3, r2
 80010c0:	d004      	beq.n	80010cc <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	0018      	movs	r0, r3
 80010c6:	f000 f88b 	bl	80011e0 <HAL_TIM_IC_CaptureCallback>
 80010ca:	e007      	b.n	80010dc <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	0018      	movs	r0, r3
 80010d0:	f000 f87e 	bl	80011d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	0018      	movs	r0, r3
 80010d8:	f000 f88a 	bl	80011f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2200      	movs	r2, #0
 80010e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	2210      	movs	r2, #16
 80010e6:	4013      	ands	r3, r2
 80010e8:	d022      	beq.n	8001130 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	2210      	movs	r2, #16
 80010ee:	4013      	ands	r3, r2
 80010f0:	d01e      	beq.n	8001130 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2211      	movs	r2, #17
 80010f8:	4252      	negs	r2, r2
 80010fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2208      	movs	r2, #8
 8001100:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	69da      	ldr	r2, [r3, #28]
 8001108:	23c0      	movs	r3, #192	@ 0xc0
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	4013      	ands	r3, r2
 800110e:	d004      	beq.n	800111a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	0018      	movs	r0, r3
 8001114:	f000 f864 	bl	80011e0 <HAL_TIM_IC_CaptureCallback>
 8001118:	e007      	b.n	800112a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	0018      	movs	r0, r3
 800111e:	f000 f857 	bl	80011d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	0018      	movs	r0, r3
 8001126:	f000 f863 	bl	80011f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	2201      	movs	r2, #1
 8001134:	4013      	ands	r3, r2
 8001136:	d00c      	beq.n	8001152 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	2201      	movs	r2, #1
 800113c:	4013      	ands	r3, r2
 800113e:	d008      	beq.n	8001152 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2202      	movs	r2, #2
 8001146:	4252      	negs	r2, r2
 8001148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	0018      	movs	r0, r3
 800114e:	f000 f837 	bl	80011c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	2280      	movs	r2, #128	@ 0x80
 8001156:	4013      	ands	r3, r2
 8001158:	d00c      	beq.n	8001174 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	2280      	movs	r2, #128	@ 0x80
 800115e:	4013      	ands	r3, r2
 8001160:	d008      	beq.n	8001174 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2281      	movs	r2, #129	@ 0x81
 8001168:	4252      	negs	r2, r2
 800116a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	0018      	movs	r0, r3
 8001170:	f000 f8e4 	bl	800133c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	2240      	movs	r2, #64	@ 0x40
 8001178:	4013      	ands	r3, r2
 800117a:	d00c      	beq.n	8001196 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	2240      	movs	r2, #64	@ 0x40
 8001180:	4013      	ands	r3, r2
 8001182:	d008      	beq.n	8001196 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2241      	movs	r2, #65	@ 0x41
 800118a:	4252      	negs	r2, r2
 800118c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	0018      	movs	r0, r3
 8001192:	f000 f835 	bl	8001200 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	2220      	movs	r2, #32
 800119a:	4013      	ands	r3, r2
 800119c:	d00c      	beq.n	80011b8 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	2220      	movs	r2, #32
 80011a2:	4013      	ands	r3, r2
 80011a4:	d008      	beq.n	80011b8 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2221      	movs	r2, #33	@ 0x21
 80011ac:	4252      	negs	r2, r2
 80011ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	0018      	movs	r0, r3
 80011b4:	f000 f8ba 	bl	800132c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80011b8:	46c0      	nop			@ (mov r8, r8)
 80011ba:	46bd      	mov	sp, r7
 80011bc:	b004      	add	sp, #16
 80011be:	bd80      	pop	{r7, pc}

080011c0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80011c8:	46c0      	nop			@ (mov r8, r8)
 80011ca:	46bd      	mov	sp, r7
 80011cc:	b002      	add	sp, #8
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80011d8:	46c0      	nop			@ (mov r8, r8)
 80011da:	46bd      	mov	sp, r7
 80011dc:	b002      	add	sp, #8
 80011de:	bd80      	pop	{r7, pc}

080011e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80011e8:	46c0      	nop			@ (mov r8, r8)
 80011ea:	46bd      	mov	sp, r7
 80011ec:	b002      	add	sp, #8
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80011f8:	46c0      	nop			@ (mov r8, r8)
 80011fa:	46bd      	mov	sp, r7
 80011fc:	b002      	add	sp, #8
 80011fe:	bd80      	pop	{r7, pc}

08001200 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001208:	46c0      	nop			@ (mov r8, r8)
 800120a:	46bd      	mov	sp, r7
 800120c:	b002      	add	sp, #8
 800120e:	bd80      	pop	{r7, pc}

08001210 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4a3b      	ldr	r2, [pc, #236]	@ (8001310 <TIM_Base_SetConfig+0x100>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d008      	beq.n	800123a <TIM_Base_SetConfig+0x2a>
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	2380      	movs	r3, #128	@ 0x80
 800122c:	05db      	lsls	r3, r3, #23
 800122e:	429a      	cmp	r2, r3
 8001230:	d003      	beq.n	800123a <TIM_Base_SetConfig+0x2a>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a37      	ldr	r2, [pc, #220]	@ (8001314 <TIM_Base_SetConfig+0x104>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d108      	bne.n	800124c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	2270      	movs	r2, #112	@ 0x70
 800123e:	4393      	bics	r3, r2
 8001240:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	4313      	orrs	r3, r2
 800124a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4a30      	ldr	r2, [pc, #192]	@ (8001310 <TIM_Base_SetConfig+0x100>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d018      	beq.n	8001286 <TIM_Base_SetConfig+0x76>
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	2380      	movs	r3, #128	@ 0x80
 8001258:	05db      	lsls	r3, r3, #23
 800125a:	429a      	cmp	r2, r3
 800125c:	d013      	beq.n	8001286 <TIM_Base_SetConfig+0x76>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a2c      	ldr	r2, [pc, #176]	@ (8001314 <TIM_Base_SetConfig+0x104>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d00f      	beq.n	8001286 <TIM_Base_SetConfig+0x76>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a2b      	ldr	r2, [pc, #172]	@ (8001318 <TIM_Base_SetConfig+0x108>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d00b      	beq.n	8001286 <TIM_Base_SetConfig+0x76>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a2a      	ldr	r2, [pc, #168]	@ (800131c <TIM_Base_SetConfig+0x10c>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d007      	beq.n	8001286 <TIM_Base_SetConfig+0x76>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a29      	ldr	r2, [pc, #164]	@ (8001320 <TIM_Base_SetConfig+0x110>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d003      	beq.n	8001286 <TIM_Base_SetConfig+0x76>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a28      	ldr	r2, [pc, #160]	@ (8001324 <TIM_Base_SetConfig+0x114>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d108      	bne.n	8001298 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	4a27      	ldr	r2, [pc, #156]	@ (8001328 <TIM_Base_SetConfig+0x118>)
 800128a:	4013      	ands	r3, r2
 800128c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	68fa      	ldr	r2, [r7, #12]
 8001294:	4313      	orrs	r3, r2
 8001296:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	2280      	movs	r2, #128	@ 0x80
 800129c:	4393      	bics	r3, r2
 800129e:	001a      	movs	r2, r3
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	695b      	ldr	r3, [r3, #20]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	68fa      	ldr	r2, [r7, #12]
 80012ac:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	689a      	ldr	r2, [r3, #8]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a13      	ldr	r2, [pc, #76]	@ (8001310 <TIM_Base_SetConfig+0x100>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d00b      	beq.n	80012de <TIM_Base_SetConfig+0xce>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a14      	ldr	r2, [pc, #80]	@ (800131c <TIM_Base_SetConfig+0x10c>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d007      	beq.n	80012de <TIM_Base_SetConfig+0xce>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a13      	ldr	r2, [pc, #76]	@ (8001320 <TIM_Base_SetConfig+0x110>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d003      	beq.n	80012de <TIM_Base_SetConfig+0xce>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a12      	ldr	r2, [pc, #72]	@ (8001324 <TIM_Base_SetConfig+0x114>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d103      	bne.n	80012e6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	691a      	ldr	r2, [r3, #16]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2201      	movs	r2, #1
 80012ea:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	691b      	ldr	r3, [r3, #16]
 80012f0:	2201      	movs	r2, #1
 80012f2:	4013      	ands	r3, r2
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d106      	bne.n	8001306 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	691b      	ldr	r3, [r3, #16]
 80012fc:	2201      	movs	r2, #1
 80012fe:	4393      	bics	r3, r2
 8001300:	001a      	movs	r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	611a      	str	r2, [r3, #16]
  }
}
 8001306:	46c0      	nop			@ (mov r8, r8)
 8001308:	46bd      	mov	sp, r7
 800130a:	b004      	add	sp, #16
 800130c:	bd80      	pop	{r7, pc}
 800130e:	46c0      	nop			@ (mov r8, r8)
 8001310:	40012c00 	.word	0x40012c00
 8001314:	40000400 	.word	0x40000400
 8001318:	40002000 	.word	0x40002000
 800131c:	40014000 	.word	0x40014000
 8001320:	40014400 	.word	0x40014400
 8001324:	40014800 	.word	0x40014800
 8001328:	fffffcff 	.word	0xfffffcff

0800132c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001334:	46c0      	nop			@ (mov r8, r8)
 8001336:	46bd      	mov	sp, r7
 8001338:	b002      	add	sp, #8
 800133a:	bd80      	pop	{r7, pc}

0800133c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001344:	46c0      	nop			@ (mov r8, r8)
 8001346:	46bd      	mov	sp, r7
 8001348:	b002      	add	sp, #8
 800134a:	bd80      	pop	{r7, pc}

0800134c <LL_GPIO_SetPinMode>:
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	6819      	ldr	r1, [r3, #0]
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	435b      	muls	r3, r3
 8001360:	001a      	movs	r2, r3
 8001362:	0013      	movs	r3, r2
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	189b      	adds	r3, r3, r2
 8001368:	43db      	mvns	r3, r3
 800136a:	400b      	ands	r3, r1
 800136c:	001a      	movs	r2, r3
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	435b      	muls	r3, r3
 8001372:	6879      	ldr	r1, [r7, #4]
 8001374:	434b      	muls	r3, r1
 8001376:	431a      	orrs	r2, r3
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	601a      	str	r2, [r3, #0]
}
 800137c:	46c0      	nop			@ (mov r8, r8)
 800137e:	46bd      	mov	sp, r7
 8001380:	b004      	add	sp, #16
 8001382:	bd80      	pop	{r7, pc}

08001384 <LL_GPIO_SetPinOutputType>:
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	68ba      	ldr	r2, [r7, #8]
 8001396:	43d2      	mvns	r2, r2
 8001398:	401a      	ands	r2, r3
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	6879      	ldr	r1, [r7, #4]
 800139e:	434b      	muls	r3, r1
 80013a0:	431a      	orrs	r2, r3
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	605a      	str	r2, [r3, #4]
}
 80013a6:	46c0      	nop			@ (mov r8, r8)
 80013a8:	46bd      	mov	sp, r7
 80013aa:	b004      	add	sp, #16
 80013ac:	bd80      	pop	{r7, pc}

080013ae <LL_GPIO_SetPinSpeed>:
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b084      	sub	sp, #16
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	60f8      	str	r0, [r7, #12]
 80013b6:	60b9      	str	r1, [r7, #8]
 80013b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	6899      	ldr	r1, [r3, #8]
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	435b      	muls	r3, r3
 80013c2:	001a      	movs	r2, r3
 80013c4:	0013      	movs	r3, r2
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	189b      	adds	r3, r3, r2
 80013ca:	43db      	mvns	r3, r3
 80013cc:	400b      	ands	r3, r1
 80013ce:	001a      	movs	r2, r3
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	435b      	muls	r3, r3
 80013d4:	6879      	ldr	r1, [r7, #4]
 80013d6:	434b      	muls	r3, r1
 80013d8:	431a      	orrs	r2, r3
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	609a      	str	r2, [r3, #8]
}
 80013de:	46c0      	nop			@ (mov r8, r8)
 80013e0:	46bd      	mov	sp, r7
 80013e2:	b004      	add	sp, #16
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <LL_GPIO_SetPinPull>:
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b084      	sub	sp, #16
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	60f8      	str	r0, [r7, #12]
 80013ee:	60b9      	str	r1, [r7, #8]
 80013f0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	68d9      	ldr	r1, [r3, #12]
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	435b      	muls	r3, r3
 80013fa:	001a      	movs	r2, r3
 80013fc:	0013      	movs	r3, r2
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	189b      	adds	r3, r3, r2
 8001402:	43db      	mvns	r3, r3
 8001404:	400b      	ands	r3, r1
 8001406:	001a      	movs	r2, r3
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	435b      	muls	r3, r3
 800140c:	6879      	ldr	r1, [r7, #4]
 800140e:	434b      	muls	r3, r1
 8001410:	431a      	orrs	r2, r3
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	60da      	str	r2, [r3, #12]
}
 8001416:	46c0      	nop			@ (mov r8, r8)
 8001418:	46bd      	mov	sp, r7
 800141a:	b004      	add	sp, #16
 800141c:	bd80      	pop	{r7, pc}

0800141e <LL_GPIO_SetAFPin_0_7>:
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b084      	sub	sp, #16
 8001422:	af00      	add	r7, sp, #0
 8001424:	60f8      	str	r0, [r7, #12]
 8001426:	60b9      	str	r1, [r7, #8]
 8001428:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	6a19      	ldr	r1, [r3, #32]
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	435b      	muls	r3, r3
 8001432:	68ba      	ldr	r2, [r7, #8]
 8001434:	4353      	muls	r3, r2
 8001436:	68ba      	ldr	r2, [r7, #8]
 8001438:	435a      	muls	r2, r3
 800143a:	0013      	movs	r3, r2
 800143c:	011b      	lsls	r3, r3, #4
 800143e:	1a9b      	subs	r3, r3, r2
 8001440:	43db      	mvns	r3, r3
 8001442:	400b      	ands	r3, r1
 8001444:	001a      	movs	r2, r3
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	435b      	muls	r3, r3
 800144a:	68b9      	ldr	r1, [r7, #8]
 800144c:	434b      	muls	r3, r1
 800144e:	68b9      	ldr	r1, [r7, #8]
 8001450:	434b      	muls	r3, r1
 8001452:	6879      	ldr	r1, [r7, #4]
 8001454:	434b      	muls	r3, r1
 8001456:	431a      	orrs	r2, r3
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	621a      	str	r2, [r3, #32]
}
 800145c:	46c0      	nop			@ (mov r8, r8)
 800145e:	46bd      	mov	sp, r7
 8001460:	b004      	add	sp, #16
 8001462:	bd80      	pop	{r7, pc}

08001464 <LL_GPIO_SetAFPin_8_15>:
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	0a1b      	lsrs	r3, r3, #8
 8001478:	68ba      	ldr	r2, [r7, #8]
 800147a:	0a12      	lsrs	r2, r2, #8
 800147c:	4353      	muls	r3, r2
 800147e:	68ba      	ldr	r2, [r7, #8]
 8001480:	0a12      	lsrs	r2, r2, #8
 8001482:	4353      	muls	r3, r2
 8001484:	68ba      	ldr	r2, [r7, #8]
 8001486:	0a12      	lsrs	r2, r2, #8
 8001488:	435a      	muls	r2, r3
 800148a:	0013      	movs	r3, r2
 800148c:	011b      	lsls	r3, r3, #4
 800148e:	1a9b      	subs	r3, r3, r2
 8001490:	43db      	mvns	r3, r3
 8001492:	400b      	ands	r3, r1
 8001494:	001a      	movs	r2, r3
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	0a1b      	lsrs	r3, r3, #8
 800149a:	68b9      	ldr	r1, [r7, #8]
 800149c:	0a09      	lsrs	r1, r1, #8
 800149e:	434b      	muls	r3, r1
 80014a0:	68b9      	ldr	r1, [r7, #8]
 80014a2:	0a09      	lsrs	r1, r1, #8
 80014a4:	434b      	muls	r3, r1
 80014a6:	68b9      	ldr	r1, [r7, #8]
 80014a8:	0a09      	lsrs	r1, r1, #8
 80014aa:	434b      	muls	r3, r1
 80014ac:	6879      	ldr	r1, [r7, #4]
 80014ae:	434b      	muls	r3, r1
 80014b0:	431a      	orrs	r2, r3
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80014b6:	46c0      	nop			@ (mov r8, r8)
 80014b8:	46bd      	mov	sp, r7
 80014ba:	b004      	add	sp, #16
 80014bc:	bd80      	pop	{r7, pc}

080014be <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b084      	sub	sp, #16
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
 80014c6:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 80014c8:	2300      	movs	r3, #0
 80014ca:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80014cc:	e048      	b.n	8001560 <LL_GPIO_Init+0xa2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2101      	movs	r1, #1
 80014d4:	68fa      	ldr	r2, [r7, #12]
 80014d6:	4091      	lsls	r1, r2
 80014d8:	000a      	movs	r2, r1
 80014da:	4013      	ands	r3, r2
 80014dc:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d03a      	beq.n	800155a <LL_GPIO_Init+0x9c>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d003      	beq.n	80014f4 <LL_GPIO_Init+0x36>
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d10e      	bne.n	8001512 <LL_GPIO_Init+0x54>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	689a      	ldr	r2, [r3, #8]
 80014f8:	68b9      	ldr	r1, [r7, #8]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	0018      	movs	r0, r3
 80014fe:	f7ff ff56 	bl	80013ae <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	6819      	ldr	r1, [r3, #0]
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	68da      	ldr	r2, [r3, #12]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	0018      	movs	r0, r3
 800150e:	f7ff ff39 	bl	8001384 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	691a      	ldr	r2, [r3, #16]
 8001516:	68b9      	ldr	r1, [r7, #8]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	0018      	movs	r0, r3
 800151c:	f7ff ff63 	bl	80013e6 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	2b02      	cmp	r3, #2
 8001526:	d111      	bne.n	800154c <LL_GPIO_Init+0x8e>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	2bff      	cmp	r3, #255	@ 0xff
 800152c:	d807      	bhi.n	800153e <LL_GPIO_Init+0x80>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	695a      	ldr	r2, [r3, #20]
 8001532:	68b9      	ldr	r1, [r7, #8]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	0018      	movs	r0, r3
 8001538:	f7ff ff71 	bl	800141e <LL_GPIO_SetAFPin_0_7>
 800153c:	e006      	b.n	800154c <LL_GPIO_Init+0x8e>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	695a      	ldr	r2, [r3, #20]
 8001542:	68b9      	ldr	r1, [r7, #8]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	0018      	movs	r0, r3
 8001548:	f7ff ff8c 	bl	8001464 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685a      	ldr	r2, [r3, #4]
 8001550:	68b9      	ldr	r1, [r7, #8]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	0018      	movs	r0, r3
 8001556:	f7ff fef9 	bl	800134c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	3301      	adds	r3, #1
 800155e:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	40da      	lsrs	r2, r3
 8001568:	1e13      	subs	r3, r2, #0
 800156a:	d1b0      	bne.n	80014ce <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 800156c:	2300      	movs	r3, #0
}
 800156e:	0018      	movs	r0, r3
 8001570:	46bd      	mov	sp, r7
 8001572:	b004      	add	sp, #16
 8001574:	bd80      	pop	{r7, pc}
	...

08001578 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001580:	4b03      	ldr	r3, [pc, #12]	@ (8001590 <LL_SetSystemCoreClock+0x18>)
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	601a      	str	r2, [r3, #0]
}
 8001586:	46c0      	nop			@ (mov r8, r8)
 8001588:	46bd      	mov	sp, r7
 800158a:	b002      	add	sp, #8
 800158c:	bd80      	pop	{r7, pc}
 800158e:	46c0      	nop			@ (mov r8, r8)
 8001590:	20000048 	.word	0x20000048

08001594 <memset>:
 8001594:	0003      	movs	r3, r0
 8001596:	1882      	adds	r2, r0, r2
 8001598:	4293      	cmp	r3, r2
 800159a:	d100      	bne.n	800159e <memset+0xa>
 800159c:	4770      	bx	lr
 800159e:	7019      	strb	r1, [r3, #0]
 80015a0:	3301      	adds	r3, #1
 80015a2:	e7f9      	b.n	8001598 <memset+0x4>

080015a4 <__libc_init_array>:
 80015a4:	b570      	push	{r4, r5, r6, lr}
 80015a6:	2600      	movs	r6, #0
 80015a8:	4c0c      	ldr	r4, [pc, #48]	@ (80015dc <__libc_init_array+0x38>)
 80015aa:	4d0d      	ldr	r5, [pc, #52]	@ (80015e0 <__libc_init_array+0x3c>)
 80015ac:	1b64      	subs	r4, r4, r5
 80015ae:	10a4      	asrs	r4, r4, #2
 80015b0:	42a6      	cmp	r6, r4
 80015b2:	d109      	bne.n	80015c8 <__libc_init_array+0x24>
 80015b4:	2600      	movs	r6, #0
 80015b6:	f000 f819 	bl	80015ec <_init>
 80015ba:	4c0a      	ldr	r4, [pc, #40]	@ (80015e4 <__libc_init_array+0x40>)
 80015bc:	4d0a      	ldr	r5, [pc, #40]	@ (80015e8 <__libc_init_array+0x44>)
 80015be:	1b64      	subs	r4, r4, r5
 80015c0:	10a4      	asrs	r4, r4, #2
 80015c2:	42a6      	cmp	r6, r4
 80015c4:	d105      	bne.n	80015d2 <__libc_init_array+0x2e>
 80015c6:	bd70      	pop	{r4, r5, r6, pc}
 80015c8:	00b3      	lsls	r3, r6, #2
 80015ca:	58eb      	ldr	r3, [r5, r3]
 80015cc:	4798      	blx	r3
 80015ce:	3601      	adds	r6, #1
 80015d0:	e7ee      	b.n	80015b0 <__libc_init_array+0xc>
 80015d2:	00b3      	lsls	r3, r6, #2
 80015d4:	58eb      	ldr	r3, [r5, r3]
 80015d6:	4798      	blx	r3
 80015d8:	3601      	adds	r6, #1
 80015da:	e7f2      	b.n	80015c2 <__libc_init_array+0x1e>
 80015dc:	08001604 	.word	0x08001604
 80015e0:	08001604 	.word	0x08001604
 80015e4:	08001608 	.word	0x08001608
 80015e8:	08001604 	.word	0x08001604

080015ec <_init>:
 80015ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015ee:	46c0      	nop			@ (mov r8, r8)
 80015f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015f2:	bc08      	pop	{r3}
 80015f4:	469e      	mov	lr, r3
 80015f6:	4770      	bx	lr

080015f8 <_fini>:
 80015f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015fa:	46c0      	nop			@ (mov r8, r8)
 80015fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015fe:	bc08      	pop	{r3}
 8001600:	469e      	mov	lr, r3
 8001602:	4770      	bx	lr
